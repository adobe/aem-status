name: Post-Mortem-Review

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      # Only run when specific paths are modified
      - "incidents/html/*.html"
      - "incidents/**/*.html"  # Catch misplaced incident files
      # You can add more specific patterns as needed

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  validate-incident-location:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Check for misplaced incident files
        run: |
          # Get list of changed files in this PR
          git fetch origin ${{ github.base_ref }}
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)

          # Check for incident files outside incidents/html/ (excluding templates)
          MISPLACED=$(echo "$CHANGED_FILES" | grep -E '^incidents/[^/]+\.html$' | grep -v 'template' || true)

          if [ -n "$MISPLACED" ]; then
            echo "❌ Error: Incident files must be placed in incidents/html/ directory"
            echo ""
            echo "Misplaced files found:"
            echo "$MISPLACED"
            echo ""
            echo "Please move these files to incidents/html/"
            exit 1
          fi

          echo "✅ All incident files are in the correct location"

  claude-review-paths:
    needs: validate-incident-location
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Claude Code Review
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          prompt: |
            REPO: ${{ github.repository }}
            PR NUMBER: ${{ github.event.pull_request.number }}

            Please review this incident post-mortem following industry best practices for SaaS services.

            Note: The PR branch is already checked out in the current working directory.

            ## Important: Check for Existing Reviews First

            Before providing feedback:
            1. Use `gh pr view ${{ github.event.pull_request.number }} --repo ${{ github.repository }} --json reviews,comments` to check for existing reviews from @claude[bot]
            2. If there are previous reviews from @claude[bot]:
               - Review only the changes made since the last review
               - Check if previous feedback has been addressed
               - For addressed feedback: Update or resolve the original comment thread if possible
               - For unaddressed feedback: Reference the original comment rather than repeating it
               - Only add NEW comments for NEW issues or issues that have gotten worse
            3. If this is the first review, proceed with a full comprehensive review

            This approach prevents comment pile-up and maintains a cleaner review thread.

            ## Review Criteria:

            ### 1. Required Sections & Completeness
            - **Summary**: Clear, concise overview of the incident
            - **Impact**: Quantitative metrics (affected users, services, duration, business impact)
            - **Root Cause**: Deep technical analysis identifying systematic causes
            - **Trigger**: Specific event or condition that initiated the failure
            - **Resolution**: Immediate mitigation and long-term fix steps
            - **Detection**: How the issue was identified (monitoring, alerts, user reports)
            - **Timeline**: Detailed chronological account with timestamps (prefer UTC)
            - **Action Items**: Specific, actionable tasks with owners to prevent recurrence
            - **Lessons Learned**: What went well, what went wrong, where we got lucky

            ### 2. Blameless Culture
            - Focuses on systematic causes, not individual blame
            - Assumes good intentions from all parties
            - Identifies process and system improvements, not people to "fix"

            ### 3. Root Cause Analysis Quality
            - Uses techniques like "Five Whys" to dig deeper
            - Distinguishes between trigger and underlying root cause
            - Identifies both technical and process failures
            - Examines why monitoring/alerting didn't catch the issue earlier

            ### 4. Actionability
            - Action items are specific and measurable
            - Each action has a clear owner
            - Actions address both immediate fixes and long-term prevention
            - Includes improvements to monitoring, testing, and deployment processes

            ### 5. Developer-Focused SaaS Considerations
            - API/service availability metrics clearly stated
            - Developer experience impact assessed
            - Documentation or communication gaps identified
            - Integration/dependency failures analyzed

            ### 6. Learning & Knowledge Sharing
            - Post-mortem provides educational value for the team
            - Insights are transferable to prevent similar incidents
            - Identifies trends across multiple incidents if applicable

            As our post-mortems are public-facing, the main focus should be on impact to customers.
            Impact to the team is secondary, and only interesting in so far as it touches the lessons
            learned and improvements made to ensure this kind of incident does not repeat.

            Use @incidents/incident-template-long.html as a reference for a post-mortem for a high-impact incident.
            Use @incidents/incident-template-short.html as a reference for a post-mortem for a low-impact incident.

            Please provide thorough feedback with inline comments on areas that need improvement,
            missing information, or where the analysis could be deeper. Highlight particularly
            well-written sections as examples of best practices.

            Use the ```suggestion markdown syntax to provide actionable recommendations that the
            post-mortem author can merge right away.

          claude_args: |
            --allowedTools "mcp__github_inline_comment__create_inline_comment,Bash(gh pr comment:*), Bash(gh pr diff:*), Bash(gh pr view:*)"
