name: Post-Mortem Review and Classification

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - "incidents/html/*.html"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  process-and-review:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      id-token: write
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate incident location
        run: |
          # Get list of changed files in this PR
          git fetch origin ${{ github.base_ref }}
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)

          # Check for incident files outside incidents/html/ (excluding templates)
          MISPLACED=$(echo "$CHANGED_FILES" | grep -E '^incidents/[^/]+\.html$' | grep -v 'template' || true)

          if [ -n "$MISPLACED" ]; then
            echo "❌ Error: Incident files must be placed in incidents/html/ directory"
            echo ""
            echo "Misplaced files found:"
            echo "$MISPLACED"
            echo ""
            echo "Please move these files to incidents/html/"
            exit 1
          fi

          echo "✅ All incident files are in the correct location"

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm install --no-save

      - name: Update incidents index
        run: npm run update-incidents

      - name: Commit index updates
        id: commit_index
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add incidents/index.json
          if git diff --staged --quiet; then
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No changes to incidents index"
          else
            git commit -m "chore: update incidents index"
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "✅ Committed incidents index updates"
          fi

      - name: Classify incidents with Claude
        if: steps.commit_index.outputs.changed == 'true'
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          prompt: |
            Classify all unclassified incidents in incidents/index.json.

            ## Instructions:

            1. Read incidents/index.json
            2. Find incidents missing any of these classification fields:
               - affectedComponents
               - internalServices
               - externalVendors
               - rootCause
            3. For each unclassified incident, analyze the name and message to determine:
               - **affectedComponents** (array or null): High-level areas affected
                 Options: delivery, publishing, admin-api, forms, code-sync, rum, indexing, logging, dns, sidekick, media
               - **internalServices** (array or null): Specific internal services impacted
                 Options: admin-api, rum, code-sync, indexing, logging, sidekick, media, or null if not applicable
               - **externalVendors** (array or null): Third-party vendors involved
                 Options: cloudflare, aws, fastly, github, microsoft, unpkg, zscaler, webpack, or null if not applicable
               - **rootCause** (string): Primary cause of the incident
                 Options: third-party-outage, configuration-change, deployment-issue, resource-limits,
                         credential-issue, dns-issue, network-issue, dependency-issue, unknown
            4. Add these fields to each unclassified incident
            5. Commit all changes with message: "feat: classify incidents"

            Be precise in your classifications based on the incident descriptions.

            Notes:
            - affectedComponents represents broad categories (delivery, publishing, etc.)
            - internalServices represents specific AEM services (admin-api, rum, etc.)
            - Some incidents may have affectedComponents without internalServices or vice versa
            - Use null when a field doesn't apply rather than an empty array
          claude_args: |
            --allowedTools "Read,Edit,Bash(git add *),Bash(git commit *)"

      - name: Push all changes to PR branch
        run: |
          # Check if there are commits to push
          if git log origin/${{ github.event.pull_request.head.ref }}..HEAD --oneline | grep -q .; then
            git push origin ${{ github.event.pull_request.head.ref }}
            echo "✅ Pushed commits to PR branch"
          else
            echo "ℹ️  No commits to push"
          fi

      - name: Wait for push to complete
        if: steps.commit_index.outputs.changed == 'true'
        run: sleep 5

      - name: Claude Code Review
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          prompt: |
            REPO: ${{ github.repository }}
            PR NUMBER: ${{ github.event.pull_request.number }}

            Please review this incident post-mortem following industry best practices for SaaS services.

            Note: The PR branch is already checked out in the current working directory.

            ## Important: Check for Existing Reviews First

            Before providing feedback:
            1. Use `gh pr view ${{ github.event.pull_request.number }} --repo ${{ github.repository }} --json reviews,comments` to check for existing reviews from @claude[bot]
            2. If there are previous reviews from @claude[bot]:
               - Review only the changes made since the last review
               - Check if previous feedback has been addressed
               - For addressed feedback: Update or resolve the original comment thread if possible
               - For unaddressed feedback: Reference the original comment rather than repeating it
               - Only add NEW comments for NEW issues or issues that have gotten worse
            3. If this is the first review, proceed with a full comprehensive review

            This approach prevents comment pile-up and maintains a cleaner review thread.

            ## Review Criteria:

            ### 1. Required Sections & Completeness
            - **Summary**: Clear, concise overview of the incident
            - **Impact**: Quantitative metrics (affected users, services, duration, business impact)
            - **Root Cause**: Deep technical analysis identifying systematic causes
            - **Trigger**: Specific event or condition that initiated the failure
            - **Resolution**: Immediate mitigation and long-term fix steps
            - **Detection**: How the issue was identified (monitoring, alerts, user reports)
            - **Timeline**: Detailed chronological account with timestamps (prefer UTC)
            - **Action Items**: Specific, actionable tasks with owners to prevent recurrence
            - **Lessons Learned**: What went well, what went wrong, where we got lucky

            ### 2. Blameless Culture
            - Focuses on systematic causes, not individual blame
            - Assumes good intentions from all parties
            - Identifies process and system improvements, not people to "fix"

            ### 3. Root Cause Analysis Quality
            - Uses techniques like "Five Whys" to dig deeper
            - Distinguishes between trigger and underlying root cause
            - Identifies both technical and process failures
            - Examines why monitoring/alerting didn't catch the issue earlier

            ### 4. Actionability
            - Action items are specific and measurable
            - Each action has a clear owner
            - Actions address both immediate fixes and long-term prevention
            - Includes improvements to monitoring, testing, and deployment processes

            ### 5. Developer-Focused SaaS Considerations
            - API/service availability metrics clearly stated
            - Developer experience impact assessed
            - Documentation or communication gaps identified
            - Integration/dependency failures analyzed

            ### 6. Learning & Knowledge Sharing
            - Post-mortem provides educational value for the team
            - Insights are transferable to prevent similar incidents
            - Identifies trends across multiple incidents if applicable

            As our post-mortems are public-facing, the main focus should be on impact to customers.
            Impact to the team is secondary, and only interesting in so far as it touches the lessons
            learned and improvements made to ensure this kind of incident does not repeat.

            Use @incidents/incident-template-long.html as a reference for a post-mortem for a high-impact incident.
            Use @incidents/incident-template-short.html as a reference for a post-mortem for a low-impact incident.

            Please provide thorough feedback with inline comments on areas that need improvement,
            missing information, or where the analysis could be deeper. Highlight particularly
            well-written sections as examples of best practices.

            Use the ```suggestion markdown syntax to provide actionable recommendations that the
            post-mortem author can merge right away.

          claude_args: |
            --allowedTools "mcp__github_inline_comment__create_inline_comment,Bash(gh pr comment:*), Bash(gh pr diff:*), Bash(gh pr view:*)"
